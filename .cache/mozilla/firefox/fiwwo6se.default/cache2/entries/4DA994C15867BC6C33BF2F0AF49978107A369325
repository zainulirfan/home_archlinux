/**/jQuery2100044660955389318246_1477470857668({"record_count":2,"records":{"page":[{"body":"TextMate has a few built in commands for moving selected text around a document. The end end result of using these commands can be achieved by cutting and pasting, but the visual feedback they provide is quite helpful. In this episode, I will show how to replicate these commands in Vim. In TextMate, the commands for moving selected text can be found under the \u201cText > Move Selection\u201d menu. I find \u201cmove selected line up\u201d to be an acurate but dull description. Personally, I prefer to call this feature text bubbling. In the video, I describe two different ways of reproducing the text bubbling feature. Text bubble with Vim primitives By putting the following in your .vimrc file, you can create maps for bubbling text up and down: \" Bubble single lines nmap <C-Up> ddkP nmap <C-Down> ddp \" Bubble multiple lines vmap <C-Up> xkP`[V`] vmap <C-Down> xp`[V`] Edge cases These mappings have a flaw which is only apparent when you use them at the boundaries of a document. For example, if the cursor is placed on the last line of a file and you try to move it up by one line, instead it moves up by two lines. Remember that these mappings are blind, they just replay a series of keystrokes, without any understanding of context. Text bubble with unimpaired.vim A better solution is available if you install Tim Pope\u2019s unimpaired plugin. This provides the exchange commands, which are mapped to [e and ]e respectively: [e - Exchange the current line with [count] lines above it. ]e - Exchange the current line with [count] lines below it. These commands can be prepended with a count, and they both also work in Visual mode. Whatsmore, they handle edgecases more gracefully, by raising an error message: Invalid address. If you have the unimpaired plugin installed, then you can use the \u201csquare bracket e\u201d commands to bubble text up and down. But if you are used to the TextMate key commands, you could always recreate those mappings and hook into the commands from unimpaired. This excerpt of Vimscript should do it: \" Bubble single lines nmap <C-Up> [e nmap <C-Down> ]e \" Bubble multiple lines vmap <C-Up> [egv vmap <C-Down> ]egv Visually select the last edited text You may already know that gv can be used to start visual mode with the same selection as last time visual mode was used. If you have cut and pasted a visual selection, then this doesn\u2019t work the way that you would expect. Fortunately, you can visually select the text from the last edit by jumping to the first and last characters with the motions \\[and`]`. I keep the following mapping in my .vimrc: \" Visually select the text that was last edited/pasted nmap gV `[v`] So with gv I can reselect the last visual selection, and with gV I can visually select the text that was most recently edited or pasted. Further reading :help gv - reselect last visual selection :help `[ - go to first character of latest edit :help `] - go to last character of latest edit unimpaired.vim - a plugin by Tim Pope (source on github)","external_id":"2771a5a5f53cfd6a74ae20f1f6d078ea1b26a13b","sections":["Text bubble with Vim primitives","Edge cases","Text bubble with unimpaired.vim","Visually select the last edited text","Further reading"],"title":"Bubbling text","updated_at":"2015-08-25T06:55:34Z","image":"http://vimcasts.org/images/blog/bubble-text.png","type":"","url":"http://vimcasts.org/episodes/bubbling-text/","popularity":1,"published_at":"2016-10-26T06:53:08Z","info":"","_index":"crawled","_type":"page","_score":2.2584274,"_version":null,"_explanation":null,"sort":null,"highlight":{"title":"<em>Bubbling</em> text","sections":"Text <em>bubble</em> with Vim primitives","body":"Personally, I prefer to call this feature text bubbling. In the video, I describe two different ways of reproducing the text bubbling feature. Text <em>bubble</em> with Vim primitives By putting the following in your .vimrc file, you can create maps for bubbling text up and down: &quot; Bubble single lines nmap &lt;C-Up&gt;"},"id":"55dc1166c75d07258e000133"},{"body":"TextMate has a few built in commands for moving selected text around a document. The end end result of using these commands can be achieved by cutting and pasting, but the visual feedback they provide is quite helpful. In this episode, I will show how to replicate these commands in Vim. In TextMate, the commands for moving selected text can be found under the \u201cText > Move Selection\u201d menu. I find \u201cmove selected line up\u201d to be an acurate but dull description. Personally, I prefer to call this feature text bubbling. In the video, I describe two different ways of reproducing the text bubbling feature. Text bubble with Vim primitives By putting the following in your .vimrc file, you can create maps for bubbling text up and down: \" Bubble single lines nmap <C-Up> ddkP nmap <C-Down> ddp \" Bubble multiple lines vmap <C-Up> xkP`[V`] vmap <C-Down> xp`[V`] Edge cases These mappings have a flaw which is only apparent when you use them at the boundaries of a document. For example, if the cursor is placed on the last line of a file and you try to move it up by one line, instead it moves up by two lines. Remember that these mappings are blind, they just replay a series of keystrokes, without any understanding of context. Text bubble with unimpaired.vim A better solution is available if you install Tim Pope\u2019s unimpaired plugin. This provides the exchange commands, which are mapped to [e and ]e respectively: [e - Exchange the current line with [count] lines above it. ]e - Exchange the current line with [count] lines below it. These commands can be prepended with a count, and they both also work in Visual mode. Whatsmore, they handle edgecases more gracefully, by raising an error message: Invalid address. If you have the unimpaired plugin installed, then you can use the \u201csquare bracket e\u201d commands to bubble text up and down. But if you are used to the TextMate key commands, you could always recreate those mappings and hook into the commands from unimpaired. This excerpt of Vimscript should do it: \" Bubble single lines nmap <C-Up> [e nmap <C-Down> ]e \" Bubble multiple lines vmap <C-Up> [egv vmap <C-Down> ]egv Visually select the last edited text You may already know that gv can be used to start visual mode with the same selection as last time visual mode was used. If you have cut and pasted a visual selection, then this doesn\u2019t work the way that you would expect. Fortunately, you can visually select the text from the last edit by jumping to the first and last characters with the motions \\[and`]`. I keep the following mapping in my .vimrc: \" Visually select the text that was last edited/pasted nmap gV `[v`] So with gv I can reselect the last visual selection, and with gV I can visually select the text that was most recently edited or pasted. Further reading :help gv - reselect last visual selection :help `[ - go to first character of latest edit :help `] - go to last character of latest edit unimpaired.vim - a plugin by Tim Pope (source on github)","external_id":"4f0f5d04dbf2b1159022d73efdc287c06a6d44e6","sections":["Text bubble with Vim primitives","Text bubble with unimpaired.vim","Visually select the last edited text","Edge cases","Further reading"],"title":"Bubbling text","updated_at":"2014-04-29T09:03:16Z","image":"","type":"","url":"http://vimcasts.org/episodes/bubbling-text","popularity":1,"published_at":"2014-04-29T09:04:55Z","info":"","_index":"crawled","_type":"page","_score":2.2291887,"_version":null,"_explanation":null,"sort":null,"highlight":{"title":"<em>Bubbling</em> text","sections":"Text <em>bubble</em> with Vim primitives","body":"Personally, I prefer to call this feature text bubbling. In the video, I describe two different ways of reproducing the text bubbling feature. Text <em>bubble</em> with Vim primitives By putting the following in your .vimrc file, you can create maps for bubbling text up and down: &quot; Bubble single lines nmap &lt;C-Up&gt;"},"id":"535f6b37e621f471d40004f6"}]},"info":{"page":{"query":"bubble","current_page":1,"num_pages":1,"per_page":10,"total_result_count":2,"facets":{}}},"errors":{}})‰fŽ³Â      Xk?Xk@=
™µ       »    :https://api.swiftype.com/api/v1/public/engines/search.json?callback=jQuery2100044660955389318246_1477470857668&q=bubble&engine_key=93GMPZWuwEM3vHyUwNGX&page=1&per_page=10&_=1477470857669 necko:classified 1 strongly-framed 1 security-info FnhllAKWRHGAlo+ESXykKAAAAAAAAAAAwAAAAAAAAEaphjojH6pBabDSgSnsfLHeAAQAAgAAAAAAAAAAAAAAAAAAAAAB4vFIJp5wRkeyPxAQ9RJGKPqbqVvKO0mKuIl8ec8o/uhmCjImkVxP+7sgiYWmMt8FvcOXmlQiTNWFiWlrbpbqgwAAAAAAAAUhMIIFHTCCBAWgAwIBAgIQDrt3YQr63uWuOkCUzc8wpzANBgkqhkiG9w0BAQsFADBNMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMScwJQYDVQQDEx5EaWdpQ2VydCBTSEEyIFNlY3VyZSBTZXJ2ZXIgQ0EwHhcNMTQwNDA4MDAwMDAwWhcNMTcwNjE0MTIwMDAwWjBrMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNU2FuIEZyYW5jaXNjbzEWMBQGA1UEChMNU3dpZnR5cGUgSW5jLjEXMBUGA1UEAwwOKi5zd2lmdHlwZS5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDLLi42ZQ9VKRujmvQ60VYBv3vsQ59OO1G3D9PL9ZYKUCXhzxn40nICRmgnf3BvJt6BKRQ5JTZSz8BSg1AmJkJAxa54+ToeGnGA7Zx9JSOODieBgCjY6Nverc2QrtPXzoq4EAASjT4on3nMuPBm985E5Ze0KCw8Z/bcHsXAitHnTLs6BOT/XGeyIvR+6Hu1CFxrptyCsZxIi1puOFR/WgfMqJp+nPJDRc5gkv53o7nsgLStpWKMVkUEm4Ov+fplEG8aDb1RZwjhhJNLFop4MY8ViHGsLw0WcJSjenyvZK/2P4kfj/hANenKzi5yQPC+DStMuOXa6yUx0vMkNeEJZFqjAgMBAAGjggHZMIIB1TAfBgNVHSMEGDAWgBQPgGEcgjFh1S8o541GOLQs4cbZ4jAdBgNVHQ4EFgQUVqvVzZugKaSFfvAUNtyXVOadc1kwJwYDVR0RBCAwHoIOKi5zd2lmdHlwZS5jb22CDHN3aWZ0eXBlLmNvbTAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMGsGA1UdHwRkMGIwL6AtoCuGKWh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9zc2NhLXNoYTItZzEuY3JsMC+gLaArhilodHRwOi8vY3JsNC5kaWdpY2VydC5jb20vc3NjYS1zaGEyLWcxLmNybDBCBgNVHSAEOzA5MDcGCWCGSAGG/WwBATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2VydC5jb20vQ1BTMHwGCCsGAQUFBwEBBHAwbjAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tMEYGCCsGAQUFBzAChjpodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNlcnRTSEEyU2VjdXJlU2VydmVyQ0EuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBAAUG8Mgz0XnG+p11hh2yQISjw26GVovCDgpcZZigc/tImFMco3QULC6tQhRjmJ+sP/MchfvNla3iqBUbJ/OH8CvAEJYexVnKuw7p08WEQZeKmBcHcjWtScLLTh4H0svgkDHf1lL445Qmu3L4VrV3tcymARQqVbvo0I/U4LHnJ6CXk21fOfEY865caSUY1hVIgNvm2cunjBWaGysCLF5/QN0oOYYxefi1kpncDw+24EuILcNeC2PzOfFkS+2d1k5lm/iHo/N8FIMQAfbZqaUhmlK1v4h3kXaBOdTinijIlZfjGJ/weYY0MydBXhjfLpQba/sc8Pgsv1POXTmgRQO79WHALwADAAAAAAEBAAA= request-method GET response-head HTTP/1.1 200 OK
Server: openresty/1.7.10.2
Date: Wed, 26 Oct 2016 07:37:17 GMT
Content-Type: application/javascript; charset=utf-8
status: 200 OK
X-Frame-Options: SAMEORIGIN
x-xss-protection: 1; mode=block
x-content-type-options: nosniff
Vary: Origin
Etag: W/"590bf187a0feb195aa93199f000883b1"
Cache-Control: max-age=0, private, must-revalidate
x-request-id: bc33f646-02eb-4913-af01-f7cdbcdce4f7
X-Runtime: 0.149682
X-Swiftype-Datacenter: dal05
X-Swiftype-Frontend-Node: web01.dal05
X-Swiftype-Edge-Node: web01.dal05
 original-response-headers Server: openresty/1.7.10.2
Date: Wed, 26 Oct 2016 07:37:17 GMT
Content-Type: application/javascript; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
status: 200 OK
X-Frame-Options: SAMEORIGIN
x-xss-protection: 1; mode=block
x-content-type-options: nosniff
Vary: Origin
Etag: W/"590bf187a0feb195aa93199f000883b1"
Cache-Control: max-age=0, private, must-revalidate
Set-Cookie: __st_user_uuid=BAhJIh01ODEwNWQyZDYyN2EzMjBjMTRiMzFhMmMGOgZFVA%3D%3D--511a208bdd3ceaf098d87ca9982ad6c631753a7c; domain=.swiftype.com; path=/; expires=Mon, 26 Oct 2026 07:37:17 -0000
x-request-id: bc33f646-02eb-4913-af01-f7cdbcdce4f7
X-Runtime: 0.149682
X-Swiftype-Datacenter: dal05
X-Swiftype-Frontend-Node: web01.dal05
X-Swiftype-Edge-Node: web01.dal05
 uncompressed-len 0    \